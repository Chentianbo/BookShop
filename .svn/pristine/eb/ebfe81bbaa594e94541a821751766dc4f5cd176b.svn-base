using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using JN.Data.Service;
using JN.Services.Tool;
using System.Data.Entity.SqlServer;
using JN.Services.Manager;
using System.IO;
using Webdiyer.WebControls.Mvc;
using MvcCore.Controls;

namespace JN.Web.Areas.UserCenter.Controllers
{

    /// <summary>
    /// 此版本有以下功能：
    /// 1、此版本为国内3M体系
    /// 2、12小时内付款有奖励，每个提供单只有一次   查找关键词“12小时内付款有奖励”定位
    /// 3、奖金有冻结期
    /// 4、奖金有烧伤

    /// </summary>
    public class HomeController : BaseController
    {
        private readonly IUserService UserService;
        private readonly ISupplyHelpService SupplyHelpService;
        private readonly IAcceptHelpService AcceptHelpService;
        private readonly IMatchingService MatchingService;
        private readonly IBonusDetailService BonusDetailService;
        private readonly ISysSettingService SysSettingService;
        private readonly ISysDBTool SysDBTool;
        private readonly IActLogService ActLogService;
        private readonly ILogDBTool LogDBTool;
        private static List<Data.SysParam> cacheSysParam = null;
        public HomeController(ISysDBTool SysDBTool,
            IUserService UserService,
            ISupplyHelpService SupplyHelpService,
            IAcceptHelpService AcceptHelpService,
            IMatchingService MatchingService,
            IBonusDetailService BonusDetailService,
            ISysSettingService SysSettingService,
            IActLogService ActLogService,
            ILogDBTool LogDBTool)
        {
            this.UserService = UserService;
            this.SupplyHelpService = SupplyHelpService;
            this.AcceptHelpService = AcceptHelpService;
            this.MatchingService = MatchingService;
            this.BonusDetailService = BonusDetailService;
            this.SysSettingService = SysSettingService;
            this.SysDBTool = SysDBTool;
            this.ActLogService = ActLogService;
            this.LogDBTool = LogDBTool;
            cacheSysParam = MvcCore.Unity.Get<ISysParamService>().ListCache("sysparams", x => x.ID < 10000).ToList();
        }


        #region 首页获取列表

        public ActionResult Index(int? page)
        {
            //logs.WriteLog("进入测试1");
            //JN.Services.Manager.MMM.CheckPayEndTime();
            //logs.WriteLog("进入测试2");
            //JN.Services.Manager.MMM.CheckVerifiedEndTime();
            //logs.WriteLog("进入测试3");
            //JN.Services.Manager.Bonus.ExpireBonus();
            //logs.WriteLog("进入测试4");
            //Bonus.ExpireBonus(Umodel); //到期的一些奖金(有冻结期的)

            int hideminute = cacheSysParam.SingleAndInit(x => x.ID == 3804).Value.ToInt(); //交易成功后隐藏记录参数
            var list = MatchingService.List(x => (x.SupplyUID == Umodel.ID || x.AcceptUID == Umodel.ID) && (x.IsOpenBuying ?? false) == false).WhereDynamic(FormatQueryString(HttpUtility.ParseQueryString(Request.Url.Query))).OrderByDescending(x => x.ID).Take(10).ToList().ToPagedList(page ?? 1, 10);
            var date = DateTime.Now.AddMinutes(-hideminute);
            if (hideminute > 0)
                list = list.Where(x => x.Status < (int)Data.Enum.MatchingStatus.Verified || (x.Status == (int)JN.Data.Enum.MatchingStatus.Verified && x.VerifiedEndTime > date)).ToList().ToPagedList(page ?? 1, 10);

            if (Request.IsAjaxRequest())
                return PartialView("_PartialMatchList", list);

            #region 解冻检查
            
            //var CheckMatch = MatchingService.List(x => x.SupplyUID == Umodel.ID && x.ReserveBoolean2 != true && (x.ReserveDate1 ?? DateTime.Now) <= DateTime.Now && x.Status == (int)JN.Data.Enum.MatchingStatus.Verified).ToList();
            //if (CheckMatch.Count() > 0)
            //{
            //    foreach (var item in CheckMatch)
            //    {
            //        MMM.ThawSupplyMoney(item.ID, Umodel);
            //    }
            //}
            #endregion

            //var supplylists = MvcCore.Unity.Get<JN.Data.Service.ISupplyHelpService>().List().ToList();
            //foreach (var item in supplylists)
            //{
            //    var onUser = MvcCore.Unity.Get<Data.Service.IUserService>().Single(item.UID);
            //    onUser.ReserveInt1 = 1;
            //    MvcCore.Unity.Get<Data.Service.IUserService>().Update(onUser);
            //    MvcCore.Unity.Get<Data.Service.ISysDBTool>().Commit();
            //}

            //MMM.MustBeRegisteredAfterSupplyHelp(Umodel); //注册48小时内必须提供帮助，否侧冻结帐号（参数调为0不生效）
            //MMM.MustBeReCastAfterAcceptHelp(Umodel);//提现完成后必须进行复投，否侧冻结帐号（参数调为0不生效）
            //MMM.MustBeReCastAfterSupplyHelp(Umodel);//排单后必须进行复投，否侧冻结帐号（参数调为0不生效）
            MMM.CheckPayEndTime();
            MMM.CheckVerifiedEndTime();
           MMM.MustBeReCastAfterSupplyHelp(Umodel);
            Bonus.JIEDONGBENJILIXI(Umodel);//自动解冻本机和利息

            var sysEntity = MvcCore.Unity.Get<ISysSettingService>().Single(1);
            string viewname = sysEntity.Theme;
            return View("index" + viewname, list);
        }
        #endregion

        #region 匹配订单列表
        public ActionResult MatchingList(int? page)
        {
            ActMessage = "匹配订单列表";
            int hideminute = cacheSysParam.SingleAndInit(x => x.ID == 3804).Value.ToInt(); //交易成功后隐藏记录参数
            var list = MatchingService.List(x => (x.SupplyUID == Umodel.ID || x.AcceptUID == Umodel.ID) && (x.IsOpenBuying ?? false) == false).WhereDynamic(FormatQueryString(HttpUtility.ParseQueryString(Request.Url.Query))).OrderByDescending(x => x.ID).ToList();
            if (hideminute > 0)
                list = list.Where(x => x.Status < (int)Data.Enum.MatchingStatus.Verified || (x.Status == (int)JN.Data.Enum.MatchingStatus.Verified && SqlFunctions.DateDiff("minute", (x.VerifiedEndTime ?? DateTime.Now), DateTime.Now) <= hideminute)).ToList();

            return View(list.ToPagedList(page ?? 1, 10));
        }
        #endregion

        #region Partial引用模块
        public ActionResult _PartialSubmitSupplyHelp()
        {
            return View();
        }

        public ActionResult _PartialSubmitAcceptHelp()
        {
            return View();
        }

        public ActionResult _PartialConfirmPay()
        {
            return View();
        }

        public ActionResult _PartialVerifyPay()
        {
            return View();
        }

        public ActionResult _PartialSubmitLeaveWord(int rid)
        {
            var model = MatchingService.Single(rid);
            if (model != null) return View(model);
            return showmsg("记录不存在");
        }

        public ActionResult _PartialPayDetail(int rid)
        {
            var model = MatchingService.Single(rid);
            if (model != null) return View(model);
            return showmsg("记录不存在");
        }

        #endregion

        #region 提供帮助
        [HttpPost]
        public ActionResult SupplyHelp(FormCollection fc)
        {
            ReturnResult result = new ReturnResult();
            try
            {
                string daytype = fc["daytype"];//类型
                string SupplyAmount = fc["supplyamount"];
                string PayWay = fc["payway"];
                int ordertype = Convert.ToInt32(daytype);
                if (string.IsNullOrEmpty(Umodel.BankCard) && string.IsNullOrEmpty(Umodel.WeiXin) && string.IsNullOrEmpty(Umodel.AliPay))
                    throw new Exception("您还未填写任何一个收款帐号（银行卡、支付宝），请到“帐号管理”处修改个人资料！");
                if (string.IsNullOrEmpty(PayWay)) throw new Exception("请选择付款方式！");
                if (SupplyAmount.ToDecimal() <= 0) throw new Exception("请您填写提供帮助的金额！");
                if (SupplyHelpService.List(x => x.OrderType == ordertype && x.UID == Umodel.ID && x.Status < (int)Data.Enum.HelpStatus.AllDeal && x.Status > 0).Count() > 0)
                    throw new Exception("对不起，你有一单提供帮助没有完成，无法提供帮助！");

                ////排单间隔3110
                //var SupolyModel= MvcCore.Unity.Get<Data.Service.ISupplyHelpService>().List(x => x.UID == Umodel.ID && x.Status > 0).OrderByDescending(x => x.ID).SingleOrDefault();//查找上一单

                //if (SupolyModel != null)
                //{
                //   if(SupolyModel.CreateTime.AddMinutes(cacheSysParam.SingleAndInit(x=>x.ID==3110).Value.ToInt())>DateTime.Now)
                //   {
                //       throw new Exception("对不起，排单时间要与上一单间隔" + cacheSysParam.SingleAndInit(x => x.ID == 3110).Value.ToInt() + "分钟,请于【" + SupolyModel.CreateTime.AddMinutes(cacheSysParam.SingleAndInit(x => x.ID == 3110).Value.ToInt()) + "】后进行排单");
                //   }
                //}
                decimal ExchangeAmount = SupplyAmount.ToDecimal() * cacheSysParam.SingleAndInit(x => x.ID == 3801).Value.ToDecimal();　//汇率参数
                decimal pdb = 0;//排单币
                bool isadvance = true;
                decimal advancemoney = 0;//预付款金额
                if (ordertype == 1)
                {
                    advancemoney = ExchangeAmount * cacheSysParam.SingleAndInit(x => x.ID == 3111).Value.ToDecimal();
                    isadvance = false;
                    #region 金额限制
                    //decimal minmoney = cacheSysParam.SingleAndInit(x => x.ID == 2201).Value.Split('-')[0].ToDecimal();　//提供帮助金额限制参数(基准最小)
                    //decimal maxmoney = cacheSysParam.SingleAndInit(x => x.ID == 2201).Value2.Split('-')[1].ToDecimal();　//提供帮助金额限制参数(基准最大)
                    decimal minmoney = cacheSysParam.SingleAndInit(x => x.ID == 2201).Value.ToDecimal();　//提供帮助金额限制参数(基准最小)
                    decimal maxmoney = cacheSysParam.SingleAndInit(x => x.ID == 2201).Value2.ToDecimal();　//提供帮助金额限制参数(基准最大)
                    if ((Umodel.UserLevel ?? 0) == (int)JN.Data.Enum.UserLeve.Level1)
                    {
                        minmoney = cacheSysParam.SingleAndInit(x => x.ID == 2202).Value.ToDecimal();
                        maxmoney = cacheSysParam.SingleAndInit(x => x.ID == 2202).Value2.ToDecimal();
                    }
                    else if ((Umodel.UserLevel ?? 0) == (int)JN.Data.Enum.UserLeve.Level2)
                    {
                        minmoney = cacheSysParam.SingleAndInit(x => x.ID == 2203).Value.ToDecimal();
                        maxmoney = cacheSysParam.SingleAndInit(x => x.ID == 2203).Value2.ToDecimal();
                    }
                    else if ((Umodel.UserLevel ?? 0) == (int)JN.Data.Enum.UserLeve.Level3)
                    {
                        minmoney = cacheSysParam.SingleAndInit(x => x.ID == 2204).Value.ToDecimal();
                        maxmoney = cacheSysParam.SingleAndInit(x => x.ID == 2204).Value2.ToDecimal();
                    }
                    if (ExchangeAmount < minmoney) throw new Exception("对不起，提供帮助金额不能少于" + minmoney + "");
                    if (ExchangeAmount > maxmoney) throw new Exception("对不起，提供帮助金额不能大于" + maxmoney + "");
                    #endregion

                    if (ExchangeAmount % cacheSysParam.SingleAndInit(x => x.ID == 2214).Value.ToDecimal() != 0) throw new Exception("对不起，提供帮助金额错误");
                    decimal Param2003 = cacheSysParam.SingleAndInit(x => x.ID == 2003).Value2.ToDecimal();
                    //检验排单币余额
                    pdb = (ExchangeAmount % Param2003 == 0) ? (ExchangeAmount / Param2003) : (ExchangeAmount / Param2003 + 1);
                    if (pdb > Umodel.Wallet2003) { throw new Exception("您的排单币不足！"); }

                    //每一轮增加5000，最高60000
                    //int tgcount = SupplyHelpService.List(x => x.UID == Umodel.ID && x.Status >= (int)Data.Enum.HelpStatus.AllDeal).Count(); //已经完成的提供帮助次数
                    //decimal maxsupplymoney = cacheSysParam.SingleAndInit(x => x.ID == 3001).Value3.ToDecimal(); //充许提供帮助的最大金额60000
                    //decimal stepmoney = cacheSysParam.SingleAndInit(x => x.ID == 3001).Value2.ToDecimal(); //每完成一次提供可累加金额
                    //maxmoney = Math.Min(maxsupplymoney, (tgcount * stepmoney + maxmoney));

                    //int _maxmonthsupplycount = cacheSysParam.SingleAndInit(x => x.ID == 3805).Value.ToInt(); //每月最多可提供订单
                    //if (_maxmonthsupplycount > 0)
                    //{
                    //    if (SupplyHelpService.List(x => x.UID == Umodel.ID && x.OrderType == 1 && x.Status > 0 && SqlFunctions.DateDiff("month", x.CreateTime, DateTime.Now) == 0).Count() > _maxmonthsupplycount)
                    //        throw new Exception("对不起，每月最多只可提供帮助次数为：" + _maxmonthsupplycount + "次");
                    //}

                    //排单必须等于或大于上一单。如果小于上一单，无法排单。
                    decimal EndMoney = SupplyHelpService.List(x => x.OrderType == ordertype && x.UID == Umodel.ID && x.Status > 0).OrderByDescending(x => x.ID).Count() == 0 ? 0 : SupplyHelpService.List(x => x.OrderType == ordertype && x.UID == Umodel.ID && x.Status > 0).OrderByDescending(x => x.ID).Take(1).Single().SupplyAmount;    //查找上一单
                    if (SupplyAmount.ToDecimal() < EndMoney * cacheSysParam.SingleAndInit(x => x.ID == 2215).Value.ToDecimal()) throw new Exception("必须大于上一单的金额的" + cacheSysParam.SingleAndInit(x => x.ID == 2215).Value + "倍");
                    //int _nextsupplytime = cacheSysParam.SingleAndInit(x => x.ID == 3807).Value.ToInt(); //下次提供帮助间隔时间
                    //if (_nextsupplytime > 0)
                    //{
                    //    if (SupplyHelpService.List(x => x.UID == Umodel.ID && x.Status > 0 && SqlFunctions.DateDiff("minute", x.CreateTime, DateTime.Now) < _nextsupplytime).Count() > 0)
                    //        throw new Exception("对不起，提供帮助间隔时间不足，请在达到排单间隔天数后再试");
                    //}

                    //个人日排单限制
                    //var mytodaysupplylist = SupplyHelpService.List(x => x.UID == Umodel.ID && x.Status > 0 && SqlFunctions.DateDiff("month", x.CreateTime, DateTime.Now) == 0);
                    //decimal mytodaysupplymoney = mytodaysupplylist.Count() > 0 ? mytodaysupplylist.Sum(x => x.ExchangeAmount) : 0;
                    //var maxMonthMoney = cacheSysParam.SingleAndInit(x => x.ID == 3805).Value.ToInt();
                    //if (maxMonthMoney > 0 && (mytodaysupplymoney + ExchangeAmount) > maxmoney) throw new Exception("对不起，当月提供帮助金额不能大于" + maxmoney + "");

                    //平台每日提供帮助上限
                    //var param_3812 = cacheSysParam.SingleAndInit(x => x.ID == 3812);
                    //var alltodaysupplylist = SupplyHelpService.List(x => x.Status > 0 && SqlFunctions.DateDiff("day", x.CreateTime, DateTime.Now) == 0);
                    //decimal alltodaysupplymoney = alltodaysupplylist.Count() > 0 ? alltodaysupplylist.Sum(x => x.ExchangeAmount) : 0;
                    //if ((alltodaysupplymoney + ExchangeAmount) > param_3812.Value.ToInt())
                    //{
                    //    throw new Exception("对不起，当天提供帮助总额已经超过平台上限");
                    //}
                    //int beisu = cacheSysParam.SingleAndInit(x => x.ID == 3005).Value.ToInt(); //金额倍数
                    //if (ExchangeAmount % beisu != 0) throw new Exception("金额必须是" + beisu + "的倍数！");

                    ////系统日排单上限
                    //decimal PARAM_SYSPDSX = cacheSysParam.SingleAndInit(x => x.ID == 3006).Value.ToDecimal();
                    //if (PARAM_SYSPDSX > 0)
                    //{
                    //    var todaysupplylist = SupplyHelpService.List(x => x.Status > 0 && SqlFunctions.DateDiff("day", x.CreateTime, DateTime.Now) == 0);
                    //    decimal todaysupplymoney = todaysupplylist.Count() > 0 ? todaysupplylist.Sum(x => x.ExchangeAmount) : 0;
                    //    if ((todaysupplymoney + ExchangeAmount) > PARAM_SYSPDSX) throw new Exception("对不起，已超出系统今日系统排单上限，请明天再排单");
                    //}
                    //int idaytype = daytype.ToInt();
                    //if (idaytype != 2101 && idaytype != 2102 && idaytype != 2103 && idaytype != 2104 && idaytype != 2105)
                    //{
                    //    throw new Exception("非法数据请求");
                    //}
                    //var paramd = cacheSysParam.SingleOrDefault(x => x.ID == idaytype);
                }


                using (System.Transactions.TransactionScope ts = new System.Transactions.TransactionScope())
                {
                    //decimal PARAM_FIRSTBL = cacheSysParam.SingleAndInit(x => x.ID == 3105).Value.ToDecimal();
                    //decimal firstMoney = ExchangeAmount * PARAM_FIRSTBL;
                                Random rd = new Random();
                    var model = new Data.SupplyHelp();
                    model.UID = Umodel.ID;
                    model.UserName = Umodel.UserName;
                    model.SupplyAmount = SupplyAmount.ToDecimal(); //申请金额
                    model.ExchangeAmount = ExchangeAmount.ToDecimal();// ExchangeAmount - firstMoney; //汇率金额
                    model.CreateTime = DateTime.Now;
                    model.Status = 1;  //状态
                    model.IsTop = false;  //是否置顶
                    model.IsRepeatQueuing = false; //是否重新排队
                    model.HaveMatchingAmount = 0; //已匹配数量
                    model.HaveAcceptAmount = 0; //
                    model.PayWay = PayWay;  //付款方式
                    model.EndTime = DateTime.Now.AddMinutes(cacheSysParam.SingleAndInit(x => x.ID == 3103).Value.ToInt());  //订单到期时间
                    if (isadvance)
                        model.SupplyNo = "D" + Umodel.ID + rd.Next(10000, 100000) + rd.Next(0, 10);//SupplyHelps.GetSupplyNo();  //单号
                    else
                        model.SupplyNo = "S" + Umodel.ID + rd.Next(10000, 100000) + rd.Next(0, 10); //SupplyHelps.GetSupplyNo();  //单号
                    model.AccrualDay = 0; //已结算利息天数
                    model.SurplusAccrualDay = 0;//cacheSysParam.SingleAndInit(x => x.ID == 1102).Value.ToInt(); //(天)
                    model.AccrualMoney = 0; //已产生的利息
                    model.IsAccrualEffective = false; //利息是否生效（匹配并验证付款后才生效）
                    model.IsAccruaCount = true; //是否还计算利息 (超过10天或有接受订单产生后不再计算利息)
                    model.TotalMoney = model.ExchangeAmount; //本单总额（含利息）
                    model.AccruaRate = 0;  //基础利息
                    model.OrderType = ordertype;
                    model.OrderMoney = ExchangeAmount;
                    model.IsAdvance = isadvance;
                    model.AdvanceMoney = advancemoney;
                    model.AdvanceHaveMoney = 0;
                    //model.ReserveDate1 = DateTime.Now.AddMinutes(paramd.Value.ToInt());//队列时间
                    //model.ReserveDecamal1 = paramd.Value2.ToDecimal();//利息
                    //model.ReserveInt1 = idaytype;
                    //model.ReserveDate2 = DateTime.Now.AddMinutes(cacheSysParam.SingleAndInit(x => x.ID == 3809).Value.ToInt());//在hl16170401中作为解冻本金和利息的时间
                    SupplyHelpService.Add(model);
                    SysDBTool.Commit();
                    Bonus.Bonus1103(model.ID);//计算代数奖
                    //Bonus.Bonus1104(model.ID);//计算管理奖
                    if (ordertype == 1)
                    {
                        //扣除排单币
                        Wallets.changeWallet(Umodel.ID, -pdb, 2003, "来自提供订单【" + model.SupplyNo + "】扣除");
                    }


                    //var model2 = model.ToModel<Data.SupplyHelp>();　//副单
                    //model2.OrderType = 0;
                    //model2.MainSupplyID = model.ID;
                    //model2.SupplyNo = SupplyHelps.GetSupplyNo2();  //单号
                    //model2.ExchangeAmount = firstMoney; //汇率金额
                    //model2.OrderMoney = ExchangeAmount;
                    //SupplyHelpService.Add(model2);
                    //SysDBTool.Commit();

                    if (SysSettingService.Single(1).MatchingMode == 1)
                    {
                        string outMsg = "";
                        MMM.Matching("", "", ref outMsg); //自动匹配
                    }
                    ts.Complete();
                    result.Status = 200;
                }
            }
            catch (Exception ex)
            {
                result.Message = ex.Message;
                logs.WriteErrorLog(HttpContext.Request.Url.ToString(), ex);
            }
            return Json(result);
        }

        #endregion

        #region 接受帮助
        [HttpPost]
        public ActionResult AcceptHelp(FormCollection fc)
        {
            ReturnResult result = new ReturnResult();
            try
            {
                string PayWay = fc["payway"];
                decimal AcceptAmount = fc["acceptamount"].ToDecimal();
                int CoinID = fc["coinid"].ToInt();
                string FormUrl = fc["formurl"];

                decimal acceptWallet = 0;
                if (CoinID == 2001)
                {
                    acceptWallet = Umodel.Wallet2001;
                    if (Umodel.Wallet2001Lock ?? false) throw new Exception("你的钱包已被冻结，请联系管理员！");
                    var walletId = MvcCore.Unity.Get<Data.Service.IWalletLogService>().List(x => x.UID == Umodel.ID && x.CoinID == CoinID).Count() > 0 ? MvcCore.Unity.Get<Data.Service.IWalletLogService>().List(x => x.UID == Umodel.ID && x.CoinID == CoinID).Max(x => x.ID) : 0;
                    if (MvcCore.Unity.Get<Data.Service.IWalletLogService>().List(x => x.ID == walletId).SingleOrDefault().Balance != Umodel.Wallet2001)
                        throw new Exception("非法操作！");
                    //if (AcceptHelpService.List(x => x.UID == Umodel.ID && x.CoinID==2001 && x.Status < (int)JN.Data.Enum.HelpStatus.AllDeal && x.Status >= 0).Count() > 0)
                    //    throw new Exception("对不起，你有一单接受帮助没有确认成功，无法接受帮助！");
                }
                else if (CoinID == 2002)
                {
                    acceptWallet = Umodel.Wallet2002;
                    if (Umodel.Wallet2002Lock ?? false) throw new Exception("你的钱包已被冻结，请联系管理员！");
                    var walletId2 = MvcCore.Unity.Get<Data.Service.IWalletLogService>().List(x => x.UID == Umodel.ID && x.CoinID == CoinID).Count() > 0 ? MvcCore.Unity.Get<Data.Service.IWalletLogService>().List(x => x.UID == Umodel.ID && x.CoinID == CoinID).Max(x => x.ID) : 0;
                    if (MvcCore.Unity.Get<Data.Service.IWalletLogService>().List(x => x.ID == walletId2).SingleOrDefault().Balance != Umodel.Wallet2002)
                        throw new Exception("非法操作！");
                    //if (AcceptHelpService.List(x => x.UID == Umodel.ID && x.CoinID == 2002 && x.Status < (int)JN.Data.Enum.HelpStatus.AllDeal && x.Status >= 0).Count() > 0)
                    //    throw new Exception("对不起，你有一单接受帮助没有确认成功，无法接受帮助！");
                }
                else
                {
                    var wlog = new Data.WarningLog();
                    wlog.CreateTime = DateTime.Now;
                    wlog.IP = Request.UserHostAddress;
                    if (Request.UrlReferrer != null)
                        wlog.Location = Request.UrlReferrer.ToString();
                    wlog.Platform = "会员";
                    wlog.WarningMsg = "试图在提现时篡改钱包数据(试图篡改钱包)";
                    wlog.WarningLevel = "严重";
                    wlog.ResultMsg = "拒绝";
                    wlog.UserName = Umodel.UserName;
                    MvcCore.Unity.Get<IWarningLogService>().Add(wlog);
                    LogDBTool.Commit();

                    Umodel.IsLock = true;
                    Umodel.LockTime = DateTime.Now;
                    Umodel.LockReason = "试图在提现时篡改钱包数据(详情查看日志)";
                    MvcCore.Unity.Get<IUserService>().Update(Umodel);
                    MvcCore.Unity.Get<ISysDBTool>().Commit();
                    throw new Exception("非法数据请求，您的帐号已被冻结");
                }

                decimal ExchangeAmount = AcceptAmount * cacheSysParam.SingleAndInit(x => x.ID == 3801).Value.ToDecimal(); //汇率
                if (acceptWallet < ExchangeAmount) throw new Exception("你的余额不足！");

                var supNo = MvcCore.Unity.Get<JN.Data.SupplyHelp>();
                if (string.IsNullOrEmpty(Umodel.BankCard) && string.IsNullOrEmpty(Umodel.WeiXin) && string.IsNullOrEmpty(Umodel.AliPay))
                    throw new Exception("您还未填写任何一个收款帐号（银行卡、支付宝、微信），请到“帐号管理”处修改个人资料！");
                if (string.IsNullOrEmpty(PayWay)) throw new Exception("请选择付款方式！");
                if (AcceptAmount <= 0) throw new Exception("请充输入接受帮助金额！");

                //if (MatchingService.List(x => x.SupplyUID == Umodel.ID && x.Status < (int)JN.Data.Enum.MatchingStatus.Verified && x.Status >= 0).Count() > 0 || 
                //    AcceptHelpService.List(x => x.UID == Umodel.ID && x.Status < (int)JN.Data.Enum.HelpStatus.AllDeal && x.Status >=0).Count() > 0 || 
                //    SupplyHelpService.List(x => x.UID == Umodel.ID && x.Status < (int)JN.Data.Enum.HelpStatus.AllDeal && x.Status >=0).Count() >0)
                //    throw new Exception("对不起，你有一单提供帮助或接受帮助没有确认成功，无法接受帮助！");

                //if (CoinID == 2002)
                //{
                //    var param3003 = cacheSysParam.SingleAndInit(x => x.ID == 3003);
                //    decimal maxmoney2002 = 0;
                //    decimal minmoney2002 = param3003.Value.ToDecimal();
                //    var param1803 = cacheSysParam.SingleAndInit(x => x.ID == 1803);
                //    var param1804 = cacheSysParam.SingleAndInit(x => x.ID == 1804);
                //    var param1805 = cacheSysParam.SingleAndInit(x => x.ID == 1805);
                //    if (!(Umodel.IsAgent ?? false))
                //        maxmoney2002 = param1803.Value.ToDecimal();
                //    else
                //    {
                //        if (Umodel.AgentLevel == 1)
                //            maxmoney2002 = param1804.Value.ToDecimal();
                //        else if (Umodel.AgentLevel == 2)
                //            maxmoney2002 = param1805.Value.ToDecimal();
                //    }
                //    if (ExchangeAmount > maxmoney2002) throw new Exception("您的接受金额最大值为" + maxmoney2002);
                //    if (ExchangeAmount < minmoney2002) throw new Exception("您的接受金额最小值为" + minmoney2002);
                //    if (ExchangeAmount % param3003.Value2.ToInt() != 0) throw new Exception("金额必须是" + param3003.Value2.ToInt() + "的倍数！");
                //}
                ////有匹配没完成的提供单不能提现
                //if (AcceptHelpService.List(x => x.UID == Umodel.ID && x.Status < (int)JN.Data.Enum.HelpStatus.AllDeal && x.Status >= 0).Count() > 0)
                //    throw new Exception("对不起，你有一单接受帮助没有完成交易，无法接受帮助！");
                var param_3811 = cacheSysParam.SingleAndInit(x => x.ID == 3811);
                //if (AcceptHelpService.List(x => x.Status > 0 && x.UID == Umodel.ID && SqlFunctions.DateDiff("DAY", x.CreateTime, DateTime.Now) == 0).Count() >= param_3811.Value.ToInt())
                //    throw new Exception("每天只可申请" + param_3811.Value.ToInt() + "次接受帮助！");
                if (CoinID == 2001 && AcceptHelpService.List(x => x.Status > 0 && x.UID == Umodel.ID && x.CoinID == 2001 && SqlFunctions.DateDiff("DAY", x.CreateTime, DateTime.Now) == 0).Count() >= param_3811.Value.ToInt())
                    throw new Exception("您今天已经提现静态钱包" + param_3811.Value + "次！");
                if (CoinID == 2002 && AcceptHelpService.List(x => x.Status > 0 && x.UID == Umodel.ID && x.CoinID == 2002 && SqlFunctions.DateDiff("DAY", x.CreateTime, DateTime.Now) == 0).Count() >= param_3811.Value2.ToInt())
                    throw new Exception("您今天已经提现动态钱包" + param_3811.Value2 + "次！");

                //平台每日提供帮助上限
                //var param_3813 = cacheSysParam.SingleAndInit(x => x.ID == 3813);
                //var alltodayacceptlist = AcceptHelpService.List(x => x.Status > 0 && SqlFunctions.DateDiff("day", x.CreateTime, DateTime.Now) == 0);
                //decimal alltodayacceptmoney = alltodayacceptlist.Count() > 0 ? alltodayacceptlist.Sum(x => x.ExchangeAmount) : 0;
                //if ((alltodayacceptmoney + ExchangeAmount) > param_3813.Value.ToInt())
                //{
                //    throw new Exception("对不起，当天接受帮助总额已经超过平台上限");
                //}
                decimal minmoney = cacheSysParam.SingleAndInit(x => x.ID == 3002).Value.Split('-')[0].ToDecimal();
                decimal maxmoney = cacheSysParam.SingleAndInit(x => x.ID == 3002).Value.Split('-')[1].ToDecimal();

                if (ExchangeAmount < minmoney || ExchangeAmount > maxmoney)
                    throw new Exception("接受金额需在" + minmoney + "~" + maxmoney + "之间！");
                int beisu = cacheSysParam.SingleAndInit(x => x.ID == 3002).Value2.ToInt();
                if (ExchangeAmount % beisu != 0) throw new Exception("金额必须是" + beisu + "的倍数！");
                if (Umodel.ReserveBoolean1 != true) throw new Exception("尚未通过实名验证");
                #region 事务操作
                using (System.Transactions.TransactionScope ts = new System.Transactions.TransactionScope())
                {
                    var model = new Data.AcceptHelp();
                    model.UID = Umodel.ID;
                    model.UserName = Umodel.UserName;
                    model.CoinID = CoinID;  //币种
                    model.CoinName = cacheSysParam.SingleAndInit(x => x.ID == CoinID).Value;  //币种名称
                    model.AcceptAmount = (decimal)AcceptAmount; //接受金额
                    model.ExchangeAmount = ExchangeAmount; //汇力转换后金额
                    model.HaveMatchingAmount = 0;  //已匹配金额
                    model.CreateTime = DateTime.Now;
                    model.Status = 1;
                    model.PayWay = PayWay;  //付款方式
                    model.IsTop = false; //是否置顶
                    model.IsRepeatQueuing = false; //是否重新排队
                    model.EndTime = DateTime.Now.AddMinutes(cacheSysParam.SingleAndInit(x => x.ID == 3103).Value.ToInt()); //订单到期时间
                    model.AcceptNo = AcceptHelps.GetAcceptNo();
                    model.ReserveStr1 = (supNo.SupplyNo ?? "S000");//存储对应的提供单
                    AcceptHelpService.Add(model);//向接受表添加纪录
                    SysDBTool.Commit();
                    Wallets.changeWallet(Umodel.ID, 0 - model.ExchangeAmount, model.CoinID, "接受帮助订单“" + model.AcceptNo + "”扣除");
                    if (CoinID == 2002)
                        DSupply((decimal)AcceptAmount);//进行一单提供帮助
                    
                    //接受订单要停止对应提供单利息
                    //if (CoinID == 2001)
                    //{
                    //    var supplylist = SupplyHelpService.List(x => x.UID == Umodel.ID && x.Status >= (int)Data.Enum.HelpStatus.AllDeal).OrderBy(x => x.ID).ToList();
                    //    if (supplylist.Count > 0)
                    //    {
                    //        //decimal totalhaveacceptamount = 0;
                    //        string usesupplyno = "";
                    //        foreach (var item in supplylist)
                    //        {
                    //            //totalhaveacceptamount += (item.TotalMoney - item.HaveAcceptAmount);
                    //            usesupplyno += item.SupplyNo + ",";
                    //            var sModel = SupplyHelpService.Single(item.ID);
                    //            //sModel.HaveAcceptAmount = sModel.HaveAcceptAmount + totalhaveacceptamount;
                    //            sModel.IsAccruaCount = false;
                    //            sModel.AccrualStopReason = "接受订单“" + model.AcceptNo + "”创建后停止";
                    //            SupplyHelpService.Update(sModel);
                    //            SysDBTool.Commit();
                    //            //if (totalhaveacceptamount >= ExchangeAmount) break;
                    //        }

                    //        var aModel = AcceptHelpService.Single(x => x.AcceptNo == model.AcceptNo);
                    //        aModel.UseSupplyNo = usesupplyno.TrimEnd(',');
                    //        AcceptHelpService.Update(aModel);
                    //        SysDBTool.Commit();
                    //    }
                    //}

                    if (SysSettingService.Single(1).MatchingMode == 1)
                    {
                        string outMsg = "";
                        MMM.Matching("", "", ref outMsg); //自动匹配
                    }
                    ts.Complete();
                    result.Status = 200;
                }
                #endregion
            }
            catch (Exception ex)
            {
                result.Message = ex.Message;
                logs.WriteErrorLog(HttpContext.Request.Url.ToString(), ex);
            }
            return Json(result);
        }

        #endregion

        private void DSupply(decimal SupplyAmount)
        {
                string PayWay = "支付宝、微信、银行卡";
                int ordertype = 0;//类型
                if (string.IsNullOrEmpty(Umodel.BankCard) && string.IsNullOrEmpty(Umodel.WeiXin) && string.IsNullOrEmpty(Umodel.AliPay))
                    throw new Exception("您还未填写任何一个收款帐号（银行卡、支付宝），请到“帐号管理”处修改个人资料！");
                //if (SupplyHelpService.List(x => x.OrderType == ordertype && x.UID == Umodel.ID && x.Status < (int)Data.Enum.HelpStatus.AllDeal && x.Status > 0).Count() > 0)
                //    throw new Exception("对不起，你有一单提供帮助没有完成，无法提供帮助！");
                decimal ExchangeAmount = SupplyAmount.ToDecimal() * cacheSysParam.SingleAndInit(x => x.ID == 3801).Value.ToDecimal();　//汇率参数
                bool isadvance = true;
                decimal advancemoney = 0;//预付款金额

                                Random rd = new Random();
                    var model = new Data.SupplyHelp();
                    model.UID = Umodel.ID;
                    model.UserName = Umodel.UserName;
                    model.SupplyAmount = SupplyAmount.ToDecimal(); //申请金额
                    model.ExchangeAmount = ExchangeAmount.ToDecimal();// ExchangeAmount - firstMoney; //汇率金额
                    model.CreateTime = DateTime.Now;
                    model.Status = 1;  //状态
                    model.IsTop = false;  //是否置顶
                    model.IsRepeatQueuing = false; //是否重新排队
                    model.HaveMatchingAmount = 0; //已匹配数量
                    model.HaveAcceptAmount = 0; //
                    model.PayWay = PayWay;  //付款方式
                    model.EndTime = DateTime.Now.AddMinutes(cacheSysParam.SingleAndInit(x => x.ID == 3103).Value.ToInt());  //订单到期时间
                    if (isadvance)
                        model.SupplyNo = "D" + Umodel.ID + rd.Next(10000, 100000) + rd.Next(0, 10);//SupplyHelps.GetSupplyNo();  //单号
                    else
                        model.SupplyNo = "S" + Umodel.ID + rd.Next(10000, 100000) + rd.Next(0, 10); //SupplyHelps.GetSupplyNo();  //单号
                    model.AccrualDay = 0; //已结算利息天数
                    model.SurplusAccrualDay = 0;//cacheSysParam.SingleAndInit(x => x.ID == 1102).Value.ToInt(); //(天)
                    model.AccrualMoney = 0; //已产生的利息
                    model.IsAccrualEffective = false; //利息是否生效（匹配并验证付款后才生效）
                    model.IsAccruaCount = true; //是否还计算利息 (超过10天或有接受订单产生后不再计算利息)
                    model.TotalMoney = model.ExchangeAmount; //本单总额（含利息）
                    model.AccruaRate = 0;  //基础利息
                    model.OrderType = ordertype;
                    model.OrderMoney = ExchangeAmount;
                    model.IsAdvance = isadvance;
                    model.AdvanceMoney = advancemoney;
                    model.AdvanceHaveMoney = 0;
                    SupplyHelpService.Add(model);
                    SysDBTool.Commit();
                    Bonus.Bonus1103(model.ID);//计算代数奖
        }

        #region 留言评论
        /// <summary>
        /// 留言评论
        /// </summary>
        /// <returns></returns>
        public ActionResult SendLeavword()
        {
            string matchingno = Request["matchingno"];
            string msgcontent = Request["msgcontent"];
            if (string.IsNullOrEmpty(msgcontent))
                return Json(new { result = "error", msg = "对不起，请填写内容！" });

            var entity = new Data.LeaveWord();
            entity.CreateTime = DateTime.Now;
            entity.Content = msgcontent;
            entity.UID = Umodel.ID;
            entity.UserName = Umodel.UserName;
            entity.MatchingNo = matchingno;
            entity.MsgType = "咨询";

            MvcCore.Unity.Get<ILeaveWordService>().Add(entity);
            SysDBTool.Commit();
            if (entity.ID > 0)
                return Json(new { result = "ok", msg = "留言成功！" });
            else
                return Json(new { result = "error", msg = "留言错误！" });
        }

        #endregion

        #region 取消

        /// <summary>
        /// 退出队列（供单)
        /// </summary>
        /// <returns></returns>
        public ActionResult CancelSupplyQueuing(int id)
        {
            var sModel = SupplyHelpService.Single(id);
            if (sModel != null)
            {
                if (sModel.UID != Umodel.ID) return showmsg("非法操作");
                if (sModel.Status == (int)Data.Enum.HelpStatus.NoMatching)
                {
                    using (System.Transactions.TransactionScope ts = new System.Transactions.TransactionScope())
                    {
                        MMM.CancelSupplyHelp(sModel.SupplyNo, "自行取消");
                        ts.Complete();
                    }
                    return showmsg("成功退出队列");
                }
                else
                    return showmsg("当前提供订单状态不可退出");
            }
            else
                return showmsg("不存在的记录");
        }

        /// <summary>
        /// 退出队列（受单)
        /// </summary>
        /// <returns></returns>
        public ActionResult CancelAcceptQueuing(int id)
        {
            var aModel = AcceptHelpService.Single(id);
            if (aModel != null)
            {
                if (aModel.UID != Umodel.ID) return showmsg("非法操作");
                if (aModel.Status == (int)Data.Enum.HelpStatus.NoMatching)
                {
                    using (System.Transactions.TransactionScope ts = new System.Transactions.TransactionScope())
                    {
                        MMM.CancelAcceptHelp(aModel.AcceptNo, "自行取消");
                        ts.Complete();
                    }
                    return showmsg("成功退出队列");
                }
                else
                    return showmsg("当前接受订单状态不可退出");
            }
            else
                return showmsg("不存在的记录");
        }
        #endregion

        #region 确认付款
        /// <summary>
        /// 确认拨款
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ConfirmPay(FormCollection form)
        {
            ReturnResult result = new ReturnResult();
            try
            {
                string id = form["id"];
                string content = form["content"];
                var mModel = MatchingService.Single(id.ToInt());
                if (mModel.SupplyUID != Umodel.ID) throw new Exception("非法操作");
                if (mModel == null) throw new Exception("记录不存在");
                string imgurl = "";
                if (Request.Files.Count == 0) throw new Exception("请您上传凭证！");
                HttpPostedFileBase file = Request.Files[0];
                if ((file != null) && (file.ContentLength > 0))
                {
                    if (Path.GetExtension(file.FileName).ToLower().Contains("aspx"))
                    {
                        var wlog = new Data.WarningLog();
                        wlog.CreateTime = DateTime.Now;
                        wlog.IP = Request.UserHostAddress;
                        if (Request.UrlReferrer != null)
                            wlog.Location = Request.UrlReferrer.ToString();
                        wlog.Platform = "会员";
                        wlog.WarningMsg = "试图上传木马文件";
                        wlog.WarningLevel = "严重";
                        wlog.ResultMsg = "拒绝";
                        wlog.UserName = Umodel.UserName;
                        MvcCore.Unity.Get<IWarningLogService>().Add(wlog);

                        Umodel.IsLock = true;
                        Umodel.LockTime = DateTime.Now;
                        Umodel.LockReason = "试图上传木马文件";
                        UserService.Update(Umodel);
                        SysDBTool.Commit();
                        throw new Exception("试图上传木马文件，您的帐号已被冻结");
                    }
                    if (!FileValidation.IsAllowedExtension(file, new FileExtension[] { FileExtension.PNG, FileExtension.JPG, FileExtension.BMP }))
                        throw new Exception("非法上传，您只可以上传图片格式的文件！");
                    var newfilename = Guid.NewGuid() + Path.GetExtension(file.FileName).ToLower();
                    if (!Directory.Exists(Request.MapPath("~/Content/Resource")))
                        Directory.CreateDirectory(Request.MapPath("~/Content/Resource"));

                    var fileName = Path.Combine(Request.MapPath("~/Content/Resource"), newfilename);
                    try
                    {
                        file.SaveAs(fileName);
                        var thumbnailfilename = UploadPic.MakeThumbnail(fileName, Request.MapPath("~/Content/Resource/"), 1024, 768, "EQU");
                        System.IO.File.Delete(fileName); //删除原文件
                        imgurl = "/Content/Resource/" + thumbnailfilename;
                    }
                    catch (Exception ex)
                    {
                        throw new Exception("上传失败：" + ex.Message);
                    }
                }

                if (mModel.Status > (int)Data.Enum.MatchingStatus.Delayed) throw new Exception("当前订单状态不可付款");
                using (System.Transactions.TransactionScope ts = new System.Transactions.TransactionScope())
                {
                    if (!string.IsNullOrEmpty(content))
                    {
                        var entity = new Data.LeaveWord();
                        entity.CreateTime = DateTime.Now;
                        entity.Content = content;
                        entity.UID = Umodel.ID;
                        entity.UserName = Umodel.UserName;
                        entity.MatchingNo = mModel.MatchingNo;
                        entity.MsgType = "付款留言";

                        MvcCore.Unity.Get<ILeaveWordService>().Add(entity);
                        SysDBTool.Commit();
                    }
                    mModel.ProofImageUrl = imgurl;
                    mModel.Status = (int)Data.Enum.MatchingStatus.Paid;
                    mModel.PayTime = DateTime.Now;
                    mModel.VerifiedEndTime = DateTime.Now.AddMinutes(cacheSysParam.SingleAndInit(x => x.ID == 3108).Value.ToInt()); //订单付款后确认时限参数
                    MatchingService.Update(mModel);
                    //确认付款时间
                    var sup = MvcCore.Unity.Get<JN.Data.Service.ISupplyHelpService>().Single(x => x.SupplyNo == mModel.SupplyNo);
                    sup.ReserveDate1 = DateTime.Now.AddMinutes(cacheSysParam.SingleAndInit(x => x.ID == 3814).Value.ToInt());//解冻时间
                    /////////////

                    SysDBTool.Commit();



                    //6小时内付款有奖励
                    Bonus.Bonus1105(mModel);


                    if (MvcCore.Unity.Get<ISysParamService>().SingleAndInit(x => x.ID == 4505).Value == "1") //付款成功是否通知接受单会员
                    {
                        var acceptUser = UserService.Single(x => x.ID == mModel.AcceptUID);
                        if (acceptUser != null)
                            SMSHelper.WebChineseMSM(acceptUser.Mobile, MvcCore.Unity.Get<ISysParamService>().SingleAndInit(x => x.ID == 4505).Value2.Replace("{ORDERNUMBER}", mModel.MatchingNo).Replace("{USERNAME}", acceptUser.UserName));
                    }

                    ts.Complete();
                    result.Status = 200;
                }
            }
            catch (Exception ex)
            {
                result.Message = ex.Message;
                logs.WriteErrorLog(HttpContext.Request.Url.ToString(), ex);
            }
            return Json(result);
        }

        /// <summary>
        /// 延时付款
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult DelayedPay(int id)
        {
            ReturnResult result = new ReturnResult();
            try
            {
                var mModel = MatchingService.Single(id);
                if (mModel.SupplyUID != Umodel.ID) throw new Exception("非法操作");
                if (mModel == null) throw new Exception("记录不存在");
                if (mModel.Status != (int)Data.Enum.MatchingStatus.UnPaid) throw new Exception("当前订单状态不可延时付款");
                mModel.Status = (int)Data.Enum.MatchingStatus.Delayed;
                mModel.PayEndTime = (mModel.PayEndTime ?? DateTime.Now).AddMinutes(cacheSysParam.SingleAndInit(x => x.ID == 3005).Value2.ToInt()); //付款截止时间;
                MatchingService.Update(mModel);
                SysDBTool.Commit();
                result.Status = 200;
            }
            catch (Exception ex)
            {
                result.Message = ex.Message;
                logs.WriteErrorLog(HttpContext.Request.Url.ToString(), ex);
            }
            return Json(result);
        }

        /// <summary>
        /// 拒绝付款
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        //[HttpPost]
        //public ActionResult RefusePay(int id)
        //{
        //    ReturnResult result = new ReturnResult();
        //    try
        //    {
        //        var mModel = MatchingService.Single(id);
        //        if (mModel.SupplyUID != Umodel.ID) throw new Exception("非法操作");
        //        if (mModel == null) throw new Exception("记录不存在");


        //        if ((mModel.FromUID ?? 0) == 0) //订单没转移过
        //        {
        //            var onUser = MvcCore.Unity.Get<IUserService>().Single(mModel.SupplyUID);
        //            if (onUser != null)
        //            {
        //                //订单转移到推荐人
        //                if (onUser.RefereeID > 0)
        //                {
        //                    //同时生成一个提供单才可计算利息
        //                    var model = new Data.SupplyHelp();
        //                    model.UID = onUser.RefereeID;
        //                    model.UserName = onUser.RefereeUser;
        //                    model.SupplyAmount = mModel.MatchAmount; //申请金额
        //                    model.ExchangeAmount = mModel.MatchAmount; //汇率金额
        //                    model.CreateTime = DateTime.Now;
        //                    model.Status = (int)Data.Enum.HelpStatus.AllMatching;  //状态
        //                    model.IsTop = false;  //是否置顶
        //                    model.IsRepeatQueuing = false; //是否重新排队
        //                    model.HaveMatchingAmount = mModel.MatchAmount; //已匹配数量
        //                    model.HaveAcceptAmount = 0; //
        //                    model.PayWay = "";  //付款方式
        //                    model.EndTime = DateTime.Now.AddMinutes(cacheSysParam.SingleAndInit(x => x.ID == 3103).Value.ToInt());  //订单到期时间
        //                    model.SupplyNo = SupplyHelps.GetSupplyNo();  //单号
        //                    model.AccrualDay = 0; //已结算利息天数
        //                    model.SurplusAccrualDay = 0; //(天)
        //                    model.AccrualMoney = 0; //已产生的利息
        //                    model.IsAccrualEffective = false; //利息是否生效（匹配并验证付款后才生效）
        //                    model.IsAccruaCount = true; //是否还计算利息 (超过30天或有接受订单产生后不再计算利息)
        //                    model.TotalMoney = model.ExchangeAmount; //本单总额（含利息）
        //                    model.AccruaRate = cacheSysParam.SingleAndInit(x => x.ID == 1102).Value2.ToDecimal();  //基础利息
        //                    model.OrderType = 1;
        //                    model.OrderMoney = mModel.MatchAmount;
        //                    MvcCore.Unity.Get<ISupplyHelpService>().Add(model);
        //                    MvcCore.Unity.Get<ISysDBTool>().Commit();

        //                    var newMatchItem = mModel.ToModel<Data.Matching>();
        //                    newMatchItem.SupplyUID = onUser.RefereeID;
        //                    newMatchItem.SupplyUserName = onUser.RefereeUser;
        //                    newMatchItem.SupplyNo = model.SupplyNo;
        //                    newMatchItem.MatchingNo = Matchings.GetOrderNumber();
        //                    newMatchItem.CreateTime = DateTime.Now;
        //                    newMatchItem.PayEndTime = DateTime.Now.AddMinutes(cacheSysParam.SingleAndInit(x => x.ID == 3106).Value.ToInt()); //付款截止时间
        //                    newMatchItem.Status = (int)Data.Enum.MatchingStatus.UnPaid; //未付款
        //                    newMatchItem.Remark = "来自“" + mModel.SupplyUserName + "”拒绝付款的订单转移，原单号：" + mModel.MatchingNo;
        //                    newMatchItem.FromUID = mModel.SupplyUID;
        //                    newMatchItem.FromUserName = mModel.SupplyUserName;
        //                    MvcCore.Unity.Get<IMatchingService>().Add(newMatchItem);
        //                    MvcCore.Unity.Get<ISysDBTool>().Commit();

        //                    mModel.Status = (int)JN.Data.Enum.MatchingStatus.Cancel;
        //                    mModel.CancelTime = DateTime.Now;
        //                    mModel.CanceReason = "拒绝付款,订单转移到推荐人“" + newMatchItem.SupplyUserName + "”，新单号为：" + newMatchItem.MatchingNo;
        //                    MvcCore.Unity.Get<IMatchingService>().Update(mModel);
        //                    MvcCore.Unity.Get<ISysDBTool>().Commit();
        //                }

        //                //对供单用户帐号冻结处理
        //                onUser.IsLock = true;
        //                onUser.LockTime = DateTime.Now;
        //                onUser.LockReason = "拒绝付款后触发冻结，单号：" + mModel.MatchingNo + "";
        //                MvcCore.Unity.Get<IUserService>().Update(onUser);
        //                MvcCore.Unity.Get<ISysDBTool>().Commit();
        //            }

        //        }
        //        else //进入抢单池
        //        {
        //            //对推荐人扣除100元
        //            decimal kqje = cacheSysParam.SingleAndInit(x => x.ID == 3106).Value3.ToDecimal();
        //            kqje = Math.Min(kqje, mModel.MatchAmount * Convert.ToDecimal(0.05));
        //            Wallets.changeWallet(mModel.SupplyUID, 0 - kqje, 2003, "拒绝付款下属会员转移的订单");

        //            var newMatchItem = MvcCore.Unity.Get<IMatchingService>().Single(mModel.ID);
        //            newMatchItem.Remark = "拒绝付款下属会员“" + newMatchItem.FromUserName + "”转移的订单“" + newMatchItem.MatchingNo + "”，扣除奖金并进入抢单池";
        //            newMatchItem.IsOpenBuying = true;
        //            MvcCore.Unity.Get<IMatchingService>().Update(newMatchItem);
        //            MvcCore.Unity.Get<ISysDBTool>().Commit();
        //        }
        //        SysDBTool.Commit();
        //        result.Status = 200;
        //    }
        //    catch (Exception ex)
        //    {
        //        result.Message = ex.Message;
        //        logs.WriteErrorLog(HttpContext.Request.Url.ToString(), ex);
        //    }
        //    return Json(result);
        //}

        #endregion

        #region 确认收款
        [HttpPost]
        public ActionResult FinshPay(FormCollection fc)
        {
            ReturnResult result = new ReturnResult();
            try
            {
                int comfir = fc["comfir"].ToInt();
                int id = fc["id"].ToInt();
                var mModel = MatchingService.Single(id);
                if (mModel.AcceptUID != Umodel.ID) throw new Exception("非法操作");
                if (mModel == null) throw new Exception("记录不存在");
                if (mModel.Status != (int)Data.Enum.MatchingStatus.Paid) throw new Exception("当前订单状态不可确认");
                using (System.Transactions.TransactionScope ts = new System.Transactions.TransactionScope())
                {
                    if (comfir == 1) //选择确认收到汇款
                    {
                        //结算提供单利息，奖金并更新成交状态
                        Bonus.Settlement(mModel);
                        mModel = MatchingService.Single(id);
                        mModel.VerifiedEndTime = DateTime.Now;
                        mModel.ReserveDate1 = DateTime.Now.AddMinutes(cacheSysParam.Single(x => x.ID == 3814).Value.ToInt());
                        mModel.Status = (int)Data.Enum.MatchingStatus.Verified;
                    }
                    else if (comfir == 2)
                    {
                        //没有收到汇款
                        mModel.Status = (int)Data.Enum.MatchingStatus.Falsehood;
                    }
                    else
                    {
                        throw new Exception("请选择订单状态");
                    }
                    MatchingService.Update(mModel);
                    SysDBTool.Commit();
                    ts.Complete();
                    result.Status = 200;
                }
            }
            catch (Exception ex)
            {
                result.Message = ex.Message;
                logs.WriteErrorLog(HttpContext.Request.Url.ToString(), ex);
            }
            return Json(result);
        }
        #endregion


        public ActionResult Takecash(int id)
        {
            ReturnResult result = new ReturnResult();
            try
            {
                throw new Exception("无效的动作");

                var mModel = MatchingService.SingleAndInit(id);
                if (mModel.ID == 0) throw new Exception("无效的订单");
                if (mModel.SupplyUID != Umodel.ID || mModel.ReserveBoolean2 == true || mModel.Status < (int)JN.Data.Enum.MatchingStatus.Verified)
                    throw new Exception("该订单不能提现");
                var sModel = MvcCore.Unity.Get<Data.Service.ISupplyHelpService>().Single(x => x.SupplyNo == mModel.SupplyNo && x.UID == Umodel.ID);
                using (System.Transactions.TransactionScope ts = new System.Transactions.TransactionScope())
                {
                    //提供单会员钱包进帐
                    Wallets.changeWallet(sModel.UID, mModel.MatchAmount, 2001, "本金收入,来自匹配订单：" + mModel.MatchingNo);
                    int ppts = 0;//匹配天数
                    var firstMatchingModel = new JN.Data.Matching();
                    //var matmodel = MvcCore.Unity.Get<Data.Service.IMatchingService>().List(x => x.SupplyNo == sModel.SupplyNo && x.SupplyUID == sModel.UID).FirstOrDefault();
                    var matmodel = mModel;
                    if (matmodel.ID > 0)
                    {
                        //ppts = DateTimeDiff.DateDiff_Sec(matmodel.CreateTime, sModel.CreateTime) / 60;
                        ppts = DateTimeDiff.DateDiff_Sec(DateTime.Now, sModel.CreateTime) / 60;
                    }
                    int type = sModel.ReserveInt1 ?? 0;
                    var param_pdlx = cacheSysParam.SingleAndInit(x => x.ID == type);
                    var param_1102 = cacheSysParam.SingleAndInit(x => x.ID == 1102);
                    int pdts = param_pdlx.Value.ToInt();
                    decimal pdlx = param_pdlx.Value2.ToDecimal();//默认为排队利息
                    var tianshu = ppts;//天数=总天-进场
                    if (ppts > pdts)
                    {
                        tianshu = ppts - pdts;
                        //ts = ts / (24 * 60) + 1;
                        tianshu = tianshu / (24 * 60);
                        if (tianshu > param_1102.Value.ToInt())
                            tianshu = param_1102.Value.ToInt();
                        for (int i = 1; i <= tianshu; i++)
                        {
                            //利息=排队利息+第一天利息 + 每天增加的利率
                            if (i <= 5)
                                pdlx = pdlx + param_1102.Value2.ToDecimal() + param_1102.Value3.ToDecimal() * (i - 1);
                            else
                                pdlx = pdlx + param_1102.Value2.ToDecimal();
                        }
                    }
                    mModel = MatchingService.SingleAndInit(id);
                    mModel.ReserveBoolean2 = true;
                    MatchingService.Update(mModel);

                    Bonus.UpdateUserWallet(mModel.MatchAmount * pdlx, sModel.SupplyNo, 1102, param_1102.Name, "来自提供订单【" + sModel.SupplyNo + "】的利息", Umodel.ID, Umodel.ID, "Addup1102", true, true, DateTime.Now);

                    var updateEntity = MvcCore.Unity.Get<Data.Service.ISupplyHelpService>().Single(sModel.ID);
                    updateEntity.AccrualMoney = updateEntity.AccrualMoney + sModel.SupplyAmount * pdlx;
                    updateEntity.TotalMoney = updateEntity.ExchangeAmount + updateEntity.AccrualMoney;
                    MvcCore.Unity.Get<Data.Service.ISupplyHelpService>().Update(updateEntity);
                    MvcCore.Unity.Get<Data.Service.ISysDBTool>().Commit();

                    ts.Complete();
                    result.Status = 200;
                }
            }
            catch (Exception ex)
            {
                result.Message = ex.Message;
                logs.WriteErrorLog(HttpContext.Request.Url.ToString(), ex);
            }
            return Json(result);

        }

        public ActionResult Wait()
        {
            return View();
        }

        public ActionResult Logout()
        {
            ActMessage = "会员退出";
            Services.UserLoginHelper.UserLogout();
            return Redirect("/UserCenter/Login");
        }

        #region 修改密码(登录及二级密码一起修改)
        public ActionResult ChangePassword()
        {
            ViewBag.Title = "修改密码";
            ActMessage = ViewBag.Title;
            return View();
        }

        [HttpPost]
        public ActionResult ChangePassword(FormCollection form)
        {
            ReturnResult result = new ReturnResult();
            try
            {
                string oldpassword = form["oldpassword"];
                string newpassword = form["newpassword"];
                string newpassword2 = form["newpassword2"];
                string connewpassword = form["connewpassword"];
                string connewpassword2 = form["connewpassword2"];

                if (oldpassword.Trim().Length == 0 || newpassword.Trim().Length == 0 || newpassword2.Trim().Length == 0)
                    throw new Exception("原二级密码、新一级密码、新二级密码不能为空");
                if (newpassword != connewpassword) throw new Exception("新一级密码与确认密码不相符");
                if (newpassword2 != connewpassword2) throw new Exception("新二级密码与确认密码不相符");
                if (Umodel.Password2 != oldpassword.ToMD5().ToMD5()) throw new Exception("原二级密码不正确");

                Umodel.Password = newpassword.ToMD5().ToMD5();
                Umodel.Password2 = newpassword2.ToMD5().ToMD5();
                UserService.Update(Umodel);
                SysDBTool.Commit();
                result.Status = 200;
            }
            catch (Exception ex)
            {
                result.Message = ex.Message;
                logs.WriteErrorLog(HttpContext.Request.Url.ToString(), ex);
            }
            return Json(result);
        }
        #endregion
    }
}
